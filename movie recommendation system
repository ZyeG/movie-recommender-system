{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["VWNC0qRLDra3","m6wliV6LFEio","BgALzD7LbnKJ"],"authorship_tag":"ABX9TyPQgI53D2+hdqrHMRxcd3M5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Imports"],"metadata":{"id":"U2OwMjlWhKWW"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":743},"id":"exTsPs6bo8-f","executionInfo":{"status":"ok","timestamp":1750540405467,"user_tz":240,"elapsed":74775,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"ce4c2ff4-1bdf-4122-c81a-4d5dd2921eb6"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[33m\r0% [Working]\u001b[0m\r            \rGet:1 http://security.ubuntu.com/ubuntu jammy-security InRelease [129 kB]\n","\u001b[33m\r0% [Connecting to archive.ubuntu.com (185.125.190.83)] [1 InRelease 14.2 kB/129\u001b[0m\u001b[33m\r0% [Waiting for headers] [Connected to cloud.r-project.org (108.157.173.89)] [C\u001b[0m\r                                                                               \rHit:2 http://archive.ubuntu.com/ubuntu jammy InRelease\n","\u001b[33m\r0% [Waiting for headers] [Waiting for headers] [Connected to r2u.stat.illinois.\u001b[0m\r                                                                               \rGet:3 https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/ InRelease [3,632 B]\n","Hit:4 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  InRelease\n","Get:5 http://archive.ubuntu.com/ubuntu jammy-updates InRelease [128 kB]\n","Get:6 https://r2u.stat.illinois.edu/ubuntu jammy InRelease [6,555 B]\n","Hit:7 https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy InRelease\n","Hit:8 https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu jammy InRelease\n","Get:9 http://archive.ubuntu.com/ubuntu jammy-backports InRelease [127 kB]\n","Hit:10 https://ppa.launchpadcontent.net/ubuntugis/ppa/ubuntu jammy InRelease\n","Get:11 http://security.ubuntu.com/ubuntu jammy-security/main amd64 Packages [3,024 kB]\n","Get:12 http://security.ubuntu.com/ubuntu jammy-security/restricted amd64 Packages [4,532 kB]\n","Get:13 http://security.ubuntu.com/ubuntu jammy-security/universe amd64 Packages [1,253 kB]\n","Get:14 https://r2u.stat.illinois.edu/ubuntu jammy/main all Packages [9,053 kB]\n","Get:15 https://r2u.stat.illinois.edu/ubuntu jammy/main amd64 Packages [2,748 kB]\n","Get:16 http://archive.ubuntu.com/ubuntu jammy-updates/restricted amd64 Packages [4,703 kB]\n","Get:17 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 Packages [1,561 kB]\n","Get:18 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages [3,340 kB]\n","Fetched 30.6 MB in 10s (2,993 kB/s)\n","Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","37 packages can be upgraded. Run 'apt list --upgradable' to see them.\n","\u001b[1;33mW: \u001b[0mSkipping acquire of configured file 'main/source/Sources' as repository 'https://r2u.stat.illinois.edu/ubuntu jammy InRelease' does not seem to provide it (sources.list entry misspelt?)\u001b[0m\n","tar: spark-3.2.1-bin-hadoop3.2.tgz: Cannot open: No such file or directory\n","tar: Error is not recoverable: exiting now\n","Requirement already satisfied: pyspark in /usr/local/lib/python3.11/dist-packages (3.5.1)\n","Requirement already satisfied: py4j==0.10.9.7 in /usr/local/lib/python3.11/dist-packages (from pyspark) (0.10.9.7)\n","Requirement already satisfied: py4j in /usr/local/lib/python3.11/dist-packages (0.10.9.7)\n"]},{"output_type":"execute_result","data":{"text/plain":["<pyspark.sql.session.SparkSession at 0x7ca71052f450>"],"text/html":["\n","            <div>\n","                <p><b>SparkSession - in-memory</b></p>\n","                \n","        <div>\n","            <p><b>SparkContext</b></p>\n","\n","            <p><a href=\"http://fa61b7b805aa:4040\">Spark UI</a></p>\n","\n","            <dl>\n","              <dt>Version</dt>\n","                <dd><code>v3.5.1</code></dd>\n","              <dt>Master</dt>\n","                <dd><code>local[*]</code></dd>\n","              <dt>AppName</dt>\n","                <dd><code>Movies</code></dd>\n","            </dl>\n","        </div>\n","        \n","            </div>\n","        "]},"metadata":{},"execution_count":1}],"source":["!sudo apt update\n","!apt-get install openjdk-8-jdk-headless -qq > /dev/null\n","#Check this site for the latest download link https://www.apache.org/dyn/closer.lua/spark/spark-3.2.1/spark-3.2.1-bin-hadoop3.2.tgz\n","!wget -q https://dlcdn.apache.org/spark/spark-3.2.1/spark-3.2.1-bin-hadoop3.2.tgz\n","!tar xf spark-3.2.1-bin-hadoop3.2.tgz\n","!pip install -q findspark\n","!pip install pyspark\n","!pip install py4j\n","\n","import os\n","import sys\n","# os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"\n","# os.environ[\"SPARK_HOME\"] = \"/content/spark-3.2.1-bin-hadoop3.2\"\n","\n","\n","import findspark\n","findspark.init()\n","findspark.find()\n","\n","import pyspark\n","\n","from pyspark.sql import DataFrame, SparkSession\n","from typing import List\n","import pyspark.sql.types as T\n","import pyspark.sql.functions as F\n","\n","spark= SparkSession \\\n","       .builder \\\n","       .appName(\"Movies\") \\\n","       .getOrCreate()\n","\n","spark"]},{"cell_type":"code","source":["from pyspark.sql.functions import (\n","    when, trim, split, lower, col,\n","    sum as _sum, mean, stddev, avg, count\n",")"],"metadata":{"id":"vzKb4D9uRPg7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pandas as pd"],"metadata":{"id":"xkKkkUrQRxlG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## integer"],"metadata":{"id":"QZmIPgGI90z4"}},{"cell_type":"code","source":["df1 = spark.read.text('/content/'+'integer.txt')"],"metadata":{"id":"WEgsdjs5972V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df1.show(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IHGzoGVh-hX2","executionInfo":{"status":"ok","timestamp":1750271000356,"user_tz":240,"elapsed":271,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"b5a1e482-801a-46b9-8208-a47315e93dd4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+-----+\n","|value|\n","+-----+\n","|45687|\n","| 5463|\n","|34443|\n","|  223|\n","|  456|\n","+-----+\n","only showing top 5 rows\n","\n"]}]},{"cell_type":"code","source":["df1 = df1.withColumn(\n","    \"parity\",\n","    when(trim(col(\"value\")).cast(\"int\") % 2 == 0, \"even\").otherwise(\"odd\")\n",")\n","\n","# Count by parity\n","df1.groupBy(\"parity\").count().show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6fAo0sC--yoB","executionInfo":{"status":"ok","timestamp":1750271010629,"user_tz":240,"elapsed":2256,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"9ca3abef-2b71-4652-e979-9f04bbdb5579"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+------+-----+\n","|parity|count|\n","+------+-----+\n","|  even|  514|\n","|   odd|  496|\n","+------+-----+\n","\n"]}]},{"cell_type":"markdown","source":["## salary"],"metadata":{"id":"N_zowWIn-2A8"}},{"cell_type":"code","source":["df2 = spark.read.text('/content/'+'salary.txt')"],"metadata":{"id":"yg4f3cd1-6NP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df2.show(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XdqnJ4uW-9W_","executionInfo":{"status":"ok","timestamp":1750271017440,"user_tz":240,"elapsed":210,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"bff5805a-61f4-4bd7-8b44-cb3e2961e650"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+---------------+\n","|          value|\n","+---------------+\n","|     Sales 9136|\n","| Research 13391|\n","|Developer 22220|\n","|       QA 31888|\n","|Marketing 22215|\n","+---------------+\n","only showing top 5 rows\n","\n"]}]},{"cell_type":"code","source":["# split col 'value' to: 'department' and 'salary'\n","df2_clean = df2.withColumn(\"dept\", trim(split(col(\"value\"), \" +\").getItem(0))) \\\n","               .withColumn(\"salary\", split(col(\"value\"), \" +\").getItem(1).cast(\"int\")) \\\n","               .drop(\"value\")\n","\n","df2_clean.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SpZEaZKq_AQX","executionInfo":{"status":"ok","timestamp":1750271022043,"user_tz":240,"elapsed":823,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"e8406257-d455-4396-839e-4962b5fc5971"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+---------+------+\n","|     dept|salary|\n","+---------+------+\n","|    Sales|  9136|\n","| Research| 13391|\n","|Developer| 22220|\n","|       QA| 31888|\n","|Marketing| 22215|\n","|    Sales| 45567|\n","| Research|  4023|\n","|Developer|  7262|\n","|       QA|  5243|\n","|Marketing| 11425|\n","|    Sales| 11956|\n","| Research| 24149|\n","|Developer| 18258|\n","|       QA| 22962|\n","|Marketing| 28960|\n","|    Sales|  8766|\n","| Research| 18343|\n","|Developer| 13686|\n","|       QA| 27626|\n","|Marketing| 32430|\n","+---------+------+\n","only showing top 20 rows\n","\n"]}]},{"cell_type":"code","source":["# total, mean, stddev per department\n","agg_df2 = df2_clean.groupBy(\"dept\").agg(\n","    _sum(\"salary\").alias(\"total_salary\"),\n","    mean(\"salary\").alias(\"mean_salary\"),\n","    stddev(\"salary\").alias(\"stddev_salary\")\n",")\n","\n","agg_df2.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-kD0R5-OBhGV","executionInfo":{"status":"ok","timestamp":1750271025982,"user_tz":240,"elapsed":1346,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"0e9e73e2-0308-4a64-f1e2-6ea73346d4fe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+---------+------------+-----------------+------------------+\n","|     dept|total_salary|      mean_salary|     stddev_salary|\n","+---------+------------+-----------------+------------------+\n","|    Sales|     3488491|17355.67661691542|10535.654471835172|\n","|Developer|     3221394|         16106.97|  9138.15811076756|\n","| Research|     3328284|         16641.42|  9189.53997971574|\n","|Marketing|     3158450|         15792.25|10002.990973181359|\n","|       QA|     3360624|         16803.12| 9854.836040366808|\n","+---------+------------+-----------------+------------------+\n","\n"]}]},{"cell_type":"code","source":["# Create a boxplot of salaries per department\n","df2_plot = df2_clean.toPandas()\n","\n","plt.figure(figsize=(10, 6))\n","sns.boxplot(x=\"dept\", y=\"salary\", data=df2_plot)\n","plt.title(\"Salary Distribution per Department\")\n","plt.xlabel(\"Department\")\n","plt.ylabel(\"Salary\")\n","plt.xticks(rotation=45)\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":607},"id":"h3b_rfTrBs3L","executionInfo":{"status":"ok","timestamp":1750271030226,"user_tz":240,"elapsed":805,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"a14ca135-e983-4b5a-8b07-40aa75564d68"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### observation in salary distributions across dept\n","- From the boxplot, Sales has highest max, lowest min, and widest spread. Developer, Research, QA, and Marketing are in similar range.\n","- Mean: Sales have highest, Marketing has the lowest mean.\n","- Standard derivation: Sales and Marketing is more deviated than Developer, Research and QA."],"metadata":{"id":"i2POtpSHCRjW"}},{"cell_type":"markdown","source":["## word count w/ MapReduce"],"metadata":{"id":"PCASyLBjB7g8"}},{"cell_type":"code","source":["df3 = spark.read.text('/content/'+'shakespeare.txt')"],"metadata":{"id":"S0hTybTpB_Ua"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df3.show(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Dz5sG-JlCF8G","executionInfo":{"status":"ok","timestamp":1750280240480,"user_tz":240,"elapsed":357,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"af1159ba-5b14-447e-f98f-95edacc47e46"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+--------------------+\n","|               value|\n","+--------------------+\n","|This eBook is for...|\n","|almost no restric...|\n","|re-use it under t...|\n","|with this eBook o...|\n","|                    |\n","+--------------------+\n","only showing top 5 rows\n","\n"]}]},{"cell_type":"code","source":["# Define exact words to count (case-insensitive match)\n","target_words = {\"shakespeare\", \"what\", \"the\", \"lord\", \"library\", \"gutenberg\", \"william\", \"college\", \"world\"}"],"metadata":{"id":"_myQQzoFChwj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# col 'word': trim, to_lower, split by 1 or more non-word char\n","df_words = df3.select(explode(split(lower(trim(col(\"value\"))), \"\\\\W+\")).alias(\"word\"))\n","\n","# filter for target words\n","df_filtered = df_words.filter(col(\"word\").isin(target_words))\n","\n","# count each word\n","word_counts = df_filtered.groupBy(\"word\").count().orderBy(\"word\")\n","word_counts.show(truncate=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TmV5wCCVCjAB","executionInfo":{"status":"ok","timestamp":1750271038475,"user_tz":240,"elapsed":2192,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"99c2a38b-cfc6-4808-ddc3-6fd772e3b636"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+-----------+-----+\n","|word       |count|\n","+-----------+-----+\n","|college    |101  |\n","|gutenberg  |109  |\n","|library    |104  |\n","|lord       |1535 |\n","|shakespeare|123  |\n","|the        |13717|\n","|what       |2114 |\n","|william    |171  |\n","|world      |461  |\n","+-----------+-----+\n","\n"]}]},{"cell_type":"markdown","source":["### alternative: using rdd w/ map, reduceByKey"],"metadata":{"id":"c2-SJ3ZJStnV"}},{"cell_type":"code","source":["# read file as RDD\n","rdd = spark.sparkContext.textFile('/content/shakespeare.txt')\n","\n","# Define target words (lowercase for matching)\n","target_words = {\"shakespeare\", \"what\", \"the\", \"lord\", \"library\", \"gutenberg\", \"william\", \"college\", \"world\"}\n","\n","# Process and count\n","word_counts = (\n","    rdd.flatMap(lambda line: line.lower().strip().split())                        # strip trimming, split each line by empty space; flatten to single word\n","       .map(lambda word: ''.join(filter(str.isalnum, word)))                      # for each word, rm non-alphanumeric chars\n","       .filter(lambda word: word in target_words)                                 # filter target words\n","       .map(lambda word: (word, 1))                                               # map to (word, 1)\n","       .reduceByKey(lambda a, b: a + b)                                           # reduce by key:word\n","       .sortByKey()\n",")\n","\n","# Collect and display\n","for word, count in word_counts.collect():\n","    print(f\"{word}: {count}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OwyFTFFyStBm","executionInfo":{"status":"ok","timestamp":1750271637855,"user_tz":240,"elapsed":5430,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"1a04f943-2be6-45f8-dddc-09a0b52a0732"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["college: 101\n","gutenberg: 106\n","library: 104\n","lord: 1528\n","shakespeare: 123\n","the: 13707\n","what: 1969\n","william: 169\n","world: 439\n"]}]},{"cell_type":"markdown","source":["## word freq and distribution"],"metadata":{"id":"TaYT85AnCoMi"}},{"cell_type":"code","source":["# Tokenize lines into lowercase words\n","df_words = df3.select(\n","    explode(split(lower(trim(col(\"value\"))), \"\\\\W+\")).alias(\"word\")\n",").filter(col(\"word\") != \"\")"],"metadata":{"id":"bqeO8oI0CrNj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["word_counts = df_words.groupBy(\"word\").count()"],"metadata":{"id":"C5E0SvdUC0HD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["top_10 = word_counts.orderBy(col(\"count\").desc()).limit(10)\n","top_10.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ed5r8klzC3TC","executionInfo":{"status":"ok","timestamp":1750280249208,"user_tz":240,"elapsed":4289,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"5b6457a1-b790-40ea-b9e2-f97e3a22aa23"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+----+-----+\n","|word|count|\n","+----+-----+\n","| the|13717|\n","| and|12974|\n","|   i| 9874|\n","|  of| 9382|\n","|  to| 9351|\n","|   a| 6725|\n","| you| 6154|\n","|  my| 5699|\n","|that| 5409|\n","|  in| 5341|\n","+----+-----+\n","\n"]}]},{"cell_type":"code","source":["bottom_10 = word_counts.orderBy(col(\"count\").asc()).limit(10)\n","bottom_10.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5TATvre0C4bH","executionInfo":{"status":"ok","timestamp":1750271045618,"user_tz":240,"elapsed":2107,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"27a8e707-277b-428a-ba39-916bb30d5dc3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+------------+-----+\n","|        word|count|\n","+------------+-----+\n","|        clog|    1|\n","|   cleopatpa|    1|\n","|  occidental|    1|\n","|      online|    1|\n","|   soundness|    1|\n","|       inner|    1|\n","|accumulation|    1|\n","|        voic|    1|\n","|    forspoke|    1|\n","|    briefest|    1|\n","+------------+-----+\n","\n"]}]},{"cell_type":"markdown","source":["## movies"],"metadata":{"id":"orJxXee3DqC6"}},{"cell_type":"markdown","source":["### dataset"],"metadata":{"id":"VWNC0qRLDra3"}},{"cell_type":"code","source":["df = spark.read.csv('/content/'+'movies.csv', header=True, inferSchema=True)"],"metadata":{"id":"nZVl9TJRDxS6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.show(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cp_Z4ROdECnS","executionInfo":{"status":"ok","timestamp":1750279177479,"user_tz":240,"elapsed":194,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"1eac1ed2-3658-4283-8ae3-82f2245bed50"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+-------+------+------+\n","|movieId|rating|userId|\n","+-------+------+------+\n","|      2|     3|     0|\n","|      3|     1|     0|\n","|      5|     2|     0|\n","|      9|     4|     0|\n","|     11|     1|     0|\n","+-------+------+------+\n","only showing top 5 rows\n","\n"]}]},{"cell_type":"markdown","source":["#### description of strcutre of content\n","- movieId: ID of the movie being rated (integer).\n","- rating: User's rating for the movie (integer, e.g., 1-5 scale).\n","- userId: ID of the user who gave the rating (integer)."],"metadata":{"id":"FSYC95OqEFR4"}},{"cell_type":"markdown","source":["#### top 10 movies w/ highest avg ratings"],"metadata":{"id":"E6RKSbcjEgjH"}},{"cell_type":"code","source":["top_movies = df.groupBy(\"movieId\") \\\n","               .agg(\n","                   avg(\"rating\").alias(\"avg_rating\"),\n","                   count(\"rating\").alias(\"num_ratings\")) \\\n","               .orderBy(col(\"avg_rating\").desc()) \\\n","               .limit(10)\n","\n","top_movies.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TELmnx8pElCp","executionInfo":{"status":"ok","timestamp":1750271098791,"user_tz":240,"elapsed":987,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"ecb2b78d-e865-461d-b44f-b4fa8efe7289"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+-------+------------------+-----------+\n","|movieId|        avg_rating|num_ratings|\n","+-------+------------------+-----------+\n","|     32|2.9166666666666665|         12|\n","|     90|            2.8125|         16|\n","|     30|               2.5|         14|\n","|     94| 2.473684210526316|         19|\n","|     23| 2.466666666666667|         15|\n","|     49|            2.4375|         16|\n","|     29|               2.4|         20|\n","|     18|               2.4|         15|\n","|     52| 2.357142857142857|         14|\n","|     53|              2.25|         12|\n","+-------+------------------+-----------+\n","\n"]}]},{"cell_type":"markdown","source":["#### top 10 Users Who Gave the Most Ratings"],"metadata":{"id":"xzMJm5pQEmWx"}},{"cell_type":"code","source":["top_users = df.groupBy(\"userId\") \\\n","              .count() \\\n","              .orderBy(col(\"count\").desc()) \\\n","              .limit(10)\n","\n","top_users.show(truncate=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5ClyK5ThEpSm","executionInfo":{"status":"ok","timestamp":1750271100707,"user_tz":240,"elapsed":737,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"b59f0fdb-e25b-4c2d-8e94-ebf33611748c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+------+-----+\n","|userId|count|\n","+------+-----+\n","|6     |57   |\n","|14    |57   |\n","|22    |56   |\n","|11    |56   |\n","|12    |55   |\n","|4     |55   |\n","|7     |54   |\n","|9     |53   |\n","|23    |52   |\n","|24    |52   |\n","+------+-----+\n","\n"]}]},{"cell_type":"markdown","source":["influence of top10 users who gave the most ratings\n","- dataset statistics (e.g. mean rating) can be biased: inflated or deflated by these users' ratings.\n","- users who rate less frequently may get less tailored recommendations, as the model prioritizes high-frequency users' influence.\n"],"metadata":{"id":"S3TzbGhwFA8T"}},{"cell_type":"markdown","source":["#### distribution of ratings, number of ratings per user"],"metadata":{"id":"m6wliV6LFEio"}},{"cell_type":"code","source":["# ratings distribution of Ratings\n","ratings_count = df.groupBy(\"rating\").count().orderBy(\"rating\")\n","ratings_pd = ratings_count.toPandas()\n","\n","# #ratings per User\n","user_counts = df.groupBy(\"userId\").count().withColumnRenamed(\"count\", \"num_ratings\")\n","user_counts_pd = user_counts.toPandas()\n","\n","# plot rating distribution\n","plt.figure(figsize=(8, 5))\n","plt.bar(ratings_pd['rating'], ratings_pd['count'], edgecolor='black')\n","plt.title(\"Distribution of Ratings\")\n","plt.xlabel(\"Rating\")\n","plt.ylabel(\"Count\")\n","plt.tight_layout()\n","plt.show()\n","\n","# plot number of ratings per user\n","plt.figure(figsize=(8, 5))\n","plt.hist(user_counts_pd['num_ratings'], bins=50, edgecolor='black')\n","plt.title(\"Number of Ratings per User\")\n","plt.xlabel(\"Ratings Count\")\n","plt.ylabel(\"Number of Users\")\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":997},"id":"iKB6YhgOFSq7","executionInfo":{"status":"ok","timestamp":1750279322208,"user_tz":240,"elapsed":3208,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"1fa82c1f-3cbe-4344-a543-934549b49459"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["\n","user_rating_counts = df.groupBy(\"userId\", \"rating\").count()\n","user_rating_matrix = user_rating_counts.groupBy(\"userId\") \\\n","    .pivot(\"rating\", [1.0, 2.0, 3.0, 4.0, 5.0]) \\\n","    .sum(\"count\") \\\n","    .fillna(0)\n","user_rating_matrix_pd = user_rating_matrix.toPandas()\n","\n","\n","# Melt the DataFrame for seaborn-style plotting\n","melted_df = user_rating_matrix_pd.melt(id_vars='userId', var_name='Rating', value_name='Count')\n","\n","# Plot average count per rating across users\n","avg_counts = melted_df.groupby('Rating')['Count'].mean()\n","\n","plt.figure(figsize=(8, 5))\n","avg_counts.plot(kind='bar')\n","plt.title(\"Average Number of Ratings per Rating Value Across Users\")\n","plt.xlabel(\"Rating\")\n","plt.ylabel(\"Average Count\")\n","plt.xticks(rotation=0)\n","plt.tight_layout()\n","plt.grid(axis='y')\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"id":"mtQW7dmox2jc","executionInfo":{"status":"ok","timestamp":1750279420620,"user_tz":240,"elapsed":2507,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"f439d751-f9e0-46c2-dfc9-9767273d08da"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#### marketing implications based on user engagement and rating tendencies"],"metadata":{"id":"bHiPRjErF5Oo"}},{"cell_type":"markdown","source":["the above plots reveal two user behavioral patterns and implications\n","\n","Obeservation1: A majority of ratings are 1-star, with very few 4 or 5 ratings.\n","\n","Implications:\n","- Invistigate why most ratings are 1: is it due to a few lower-rated movies, or people just dont like movies on this platform in general.\n","\n","Observation2: Most users gave between 44 to 57 ratings, the spread of number of ratings per user is not too wide.\n","\n","Implications:\n","since not wide spread, the recommendation system is in general not biased (not heavily influenced by few users who give many ratings)"],"metadata":{"id":"Blszs5meGJbZ"}},{"cell_type":"markdown","source":["### compare performance of differnt splits"],"metadata":{"id":"shymAvS0tVDR"}},{"cell_type":"code","source":["from pyspark.sql import SparkSession\n","from pyspark.ml.recommendation import ALS\n","from pyspark.ml.evaluation import RegressionEvaluator\n","from functools import reduce"],"metadata":{"id":"rw2yWweGrolV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def stratified_split(df, strata_col, split_ratio, seed=42):\n","    # Get all userId values\n","    user_ids = df.select(strata_col).distinct().rdd.flatMap(lambda x: x).collect()\n","\n","    # Create fractions dictionary: userId -> split_ratio\n","    fractions = {uid: split_ratio for uid in user_ids}\n","\n","    # Sample training set\n","    train_df = df.sampleBy(strata_col, fractions, seed=seed)\n","\n","    # Get test set as the remaining rows\n","    test_df = df.subtract(train_df)\n","\n","    return train_df, test_df\n"],"metadata":{"id":"F4-_PWnTryL7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Define ALS training and evaluation function\n","def train_model(train_df):\n","    als = ALS(\n","        userCol=\"userId\",\n","        itemCol=\"movieId\",\n","        ratingCol=\"rating\",\n","        coldStartStrategy=\"drop\",\n","        maxIter=10,\n","        regParam=0.1,\n","        rank=10,\n","        nonnegative=True,\n","        seed=42\n","    )\n","    return als.fit(train_df)\n","\n","def evaluate_model(model, test_df):\n","    predictions = model.transform(test_df)\n","    evaluator = RegressionEvaluator(\n","        metricName=\"rmse\",\n","        labelCol=\"rating\",\n","        predictionCol=\"prediction\"\n","    )\n","    return evaluator.evaluate(predictions)"],"metadata":{"id":"A351sxJTrz14"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### train base models"],"metadata":{"id":"1y1IXYZs1OAK"}},{"cell_type":"code","source":["split_ratios = [0.7, 0.8]\n","models = {}\n","test_sets = {}\n","train_sets = {}\n","\n","for ratio in split_ratios:\n","    train_df, test_df = stratified_split(df, \"userId\", ratio)\n","    model = train_model(train_df)\n","\n","    # label = f\"{int(ratio * 100)}/{int((1 - ratio) * 100)}\"\n","    label = f\"{round(ratio * 100)}/{round((1 - ratio) * 100)}\"\n","    models[label] = model\n","    test_sets[label] = test_df\n","    train_sets[label] = train_df\n","\n","    print(f\"Trained model for {label} split.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b8jGf3Mur0Yk","executionInfo":{"status":"ok","timestamp":1750540726884,"user_tz":240,"elapsed":9405,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"177e1286-75c5-467d-c26a-322abfc312ff"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Trained model for 70/30 split.\n","Trained model for 80/20 split.\n"]}]},{"cell_type":"markdown","source":["#### basic eval"],"metadata":{"id":"Gl6i8brp1P_-"}},{"cell_type":"code","source":["rmse_results = {}\n","\n","for label in models:\n","    model = models[label]\n","    test_df = test_sets[label]\n","\n","    rmse = evaluate_model(model, test_df)\n","    rmse_results[label] = rmse\n","\n","    print(f\"RMSE for {label} split: {rmse:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m6UM44eK1Nbt","executionInfo":{"status":"ok","timestamp":1750540733902,"user_tz":240,"elapsed":2462,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"21c6c20b-387f-44c0-8510-969b7058d09c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE for 70/30 split: 1.0172\n","RMSE for 80/20 split: 1.0663\n"]}]},{"cell_type":"markdown","source":["#### (ignore) experiment code for ranking eval"],"metadata":{"id":"BgALzD7LbnKJ"}},{"cell_type":"code","source":["models[\"70/30\"].recommendForAllUsers(5).show(5,truncate=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AUwjSlVSY5V9","executionInfo":{"status":"ok","timestamp":1750279648127,"user_tz":240,"elapsed":2386,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"207992b3-343b-4044-ba96-ca32c4e88b21"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+------+-------------------------------------------------------------------------------------+\n","|userId|recommendations                                                                      |\n","+------+-------------------------------------------------------------------------------------+\n","|20    |[{22, 3.8441942}, {94, 3.384847}, {75, 3.2100854}, {77, 3.1697676}, {90, 3.140831}]  |\n","|10    |[{40, 3.2486246}, {2, 3.001871}, {92, 2.772387}, {89, 2.6914203}, {49, 2.6769764}]   |\n","|0     |[{53, 2.7005374}, {2, 2.6812255}, {92, 2.5241883}, {62, 2.4927173}, {40, 2.4254746}] |\n","|1     |[{90, 3.4103322}, {62, 3.0767837}, {68, 2.9187875}, {32, 2.8420515}, {22, 2.7299142}]|\n","|21    |[{53, 3.9083798}, {29, 3.7526135}, {52, 3.6709828}, {2, 3.3489046}, {63, 3.1799872}] |\n","+------+-------------------------------------------------------------------------------------+\n","only showing top 5 rows\n","\n"]}]},{"cell_type":"code","source":["pred = model.recommendForAllUsers(10) \\\n","        .selectExpr(\"userId\", \"transform(recommendations, x -> int(x.movieId)) as pred_movieIds\")"],"metadata":{"id":"YTIsobzuZ1wl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pred.show(5,truncate=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nc7R56ybcJEL","executionInfo":{"status":"ok","timestamp":1750273745554,"user_tz":240,"elapsed":3582,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"40692207-e96d-445b-de01-3b52be465cce"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+------+----------------------------------------+\n","|userId|pred_movieIds                           |\n","+------+----------------------------------------+\n","|20    |[22, 94, 75, 90, 77, 88, 98, 51, 53, 7] |\n","|10    |[2, 40, 92, 62, 49, 89, 42, 25, 81, 70] |\n","|0     |[92, 2, 53, 62, 9, 89, 40, 12, 81, 82]  |\n","|1     |[90, 62, 68, 22, 77, 85, 53, 94, 30, 28]|\n","|21    |[29, 53, 52, 63, 2, 74, 76, 72, 93, 62] |\n","+------+----------------------------------------+\n","only showing top 5 rows\n","\n"]}]},{"cell_type":"code","source":["filtered_test = test_df.filter(col(\"rating\") >= 4) # rating-thres >=4"],"metadata":{"id":"EIuGOx1BbDJM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["filtered_test.show(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cfr6vsHZbi38","executionInfo":{"status":"ok","timestamp":1750273506476,"user_tz":240,"elapsed":455,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"649b3028-a069-4fcf-ff8e-923bee5d8a31"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+-------+------+------+\n","|movieId|rating|userId|\n","+-------+------+------+\n","|     88|     5|    26|\n","|     16|     4|    12|\n","|     77|     4|    24|\n","|      8|     5|     2|\n","|     51|     5|    22|\n","+-------+------+------+\n","only showing top 5 rows\n","\n"]}]},{"cell_type":"code","source":["test_grouped = filtered_test.groupBy(\"userId\").agg(collect_list(col(\"movieId\").cast(\"int\")).alias(\"liked_movieIds\"))"],"metadata":{"id":"TZ4aU4rabJIz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_grouped.show(5, truncate=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_ySwRuRWcjZ5","executionInfo":{"status":"ok","timestamp":1750273774613,"user_tz":240,"elapsed":332,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"35c667f2-21a6-430b-8926-af84792e686a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+------+--------------------+\n","|userId|liked_movieIds      |\n","+------+--------------------+\n","|28    |[49]                |\n","|26    |[88, 54, 36, 68]    |\n","|12    |[16, 35, 50, 64]    |\n","|22    |[51, 68, 74, 69, 88]|\n","|16    |[54]                |\n","+------+--------------------+\n","only showing top 5 rows\n","\n"]}]},{"cell_type":"code","source":["pred.join(test_grouped, on=\"userId\", how=\"inner\").show(5, truncate=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ifVZmCh0cFCw","executionInfo":{"status":"ok","timestamp":1750273806842,"user_tz":240,"elapsed":5287,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"bb1de3a8-db93-4bff-c449-152a75196e5e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+------+----------------------------------------+--------------------+\n","|userId|pred_movieIds                           |liked_movieIds      |\n","+------+----------------------------------------+--------------------+\n","|21    |[29, 53, 52, 63, 2, 74, 76, 72, 93, 62] |[87]                |\n","|11    |[18, 32, 30, 27, 23, 79, 13, 81, 90, 49]|[69, 48, 66]        |\n","|12    |[46, 55, 17, 49, 90, 27, 48, 65, 94, 32]|[16, 35, 50, 64]    |\n","|22    |[22, 75, 77, 30, 90, 94, 88, 32, 7, 53] |[51, 68, 74, 69, 88]|\n","|2     |[93, 83, 39, 37, 89, 92, 19, 34, 81, 4] |[8, 40]             |\n","+------+----------------------------------------+--------------------+\n","only showing top 5 rows\n","\n"]}]},{"cell_type":"markdown","source":["### in-depth eval"],"metadata":{"id":"HiXGvs4CteNu"}},{"cell_type":"markdown","source":["- RMSE (root mean squared error)\n","- MSE (Mean Squared Error)\n","- MAE (Mean Absolute Error)\n","\n","- Precision@k: Of the top-k recommended movies i.e. rated>=4, what fraction are actually liked i.e. rated>=4\n","\n","- Recall@k: Of the movies a user actually liked, what fraction are captured in the top-k recommendations"],"metadata":{"id":"5ToCz9KdBBl6"}},{"cell_type":"markdown","source":["Metrics trade-off in the context of sparse data or imbalanced ratings\n","\n","- sparse data: most user-movie interaction data are missing, imblalance ratings: some rating values dominate others\n","\n","- RMSE, MSE may push the modelto predict average ratings via trying to minimizing sum of distances between prediction and real ratings\n","\n","- If sparse data, there might very little information i.e. not much >= 4 ratings, to compute reliable precision and recall@k.\n","\n","- If most ratings are low (imbalanced ratings), precision can by high by simply avoiding false positive.\n","\n","\n"],"metadata":{"id":"U2RTnhxXGZTq"}},{"cell_type":"code","source":["# \"rmse\", \"mse\", \"mae\"\n","def evaluate_regression_metrics(predictions):\n","    metrics = {}\n","    for metric_name in [\"rmse\", \"mse\", \"mae\"]:\n","        evaluator = RegressionEvaluator(metricName=metric_name, labelCol=\"rating\", predictionCol=\"prediction\")\n","        metrics[metric_name.upper()] = evaluator.evaluate(predictions)\n","    return metrics"],"metadata":{"id":"X3e4geYlt4kA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Precision / Recall / F1, for top-N recommendations, at k=5\n","# RankingEvaluator, with filtered ground truth\n","from pyspark.ml.evaluation import RankingEvaluator\n","from pyspark.sql.functions import collect_list, col, expr, explode, row_number\n","from pyspark.sql.window import Window\n","\n","def prepare_ranking_data_filtered(model, test_df, k=5, rating_thresh=4.0):\n","    # Top-k ALS predictions\n","    pred_df = model.recommendForAllUsers(k) \\\n","        .selectExpr(\"userId\", \"transform(recommendations, x -> double(x.movieId)) as pred_movieIds\")\n","        # run sql expr: transforms recommendations to prediction column\n","\n","    # Filter test_df to include only relevant (liked) items\n","    filtered_test = test_df.filter(col(\"rating\") >= rating_thresh)\n","\n","    # Group relevant test items per user\n","    test_grouped = filtered_test.groupBy(\"userId\").agg(\n","        collect_list(col(\"movieId\").cast(\"double\")).alias(\"liked_movieIds\")\n","    )\n","\n","    return pred_df.join(test_grouped, on=\"userId\", how=\"inner\")\n"],"metadata":{"id":"_XocVWhGu10A"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def evaluate_all_metrics(model, test_df, k=5, rating_thresh=4.0):\n","    # Prepare data for ranking metrics\n","    ranking_df = prepare_ranking_data_filtered(model, test_df, k, rating_thresh)\n","\n","    # Prepare data for regression metrics\n","    prediction_df = model.transform(test_df).dropna(subset=[\"prediction\"])\n","\n","    # === Regression metrics ===\n","    regression_metrics = {}\n","    for metric in [\"rmse\", \"mse\", \"mae\"]:\n","        reg_eval = RegressionEvaluator(\n","            predictionCol=\"prediction\",\n","            labelCol=\"rating\",\n","            metricName=metric\n","        )\n","        regression_metrics[metric.upper()] = reg_eval.evaluate(prediction_df)\n","\n","    # === Ranking metrics ===\n","    precision_eval = RankingEvaluator(\n","        predictionCol=\"pred_movieIds\",\n","        labelCol=\"liked_movieIds\",\n","        metricName=\"precisionAtK\",\n","        k=k\n","    )\n","    recall_eval = RankingEvaluator(\n","        predictionCol=\"pred_movieIds\",\n","        labelCol=\"liked_movieIds\",\n","        metricName=\"recallAtK\",\n","        k=k\n","    )\n","\n","    precision = precision_eval.evaluate(ranking_df)\n","    recall = recall_eval.evaluate(ranking_df)\n","\n","    # === F1 score ===\n","    f1 = (2 * precision * recall) / (precision + recall) if (precision + recall) > 0 else 0.0\n","\n","    return {\n","        \"Precision@k\": precision,\n","        \"Recall@k\": recall,\n","        \"F1@k\": f1,\n","        **regression_metrics\n","    }"],"metadata":{"id":"wb8kPpv04XcJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ranking_results = {}\n","k = 5\n","rating_thresh = 4.0\n","\n","for label in models:\n","    model = models[label]\n","    test_df = test_sets[label]\n","\n","    metrics = evaluate_all_metrics(model, test_df, k=k, rating_thresh=rating_thresh)\n","    ranking_results[label] = metrics\n","\n","    print(f\"\\nMetrics for {label} split:\")\n","    for metric, value in metrics.items():\n","        print(f\"{metric}: {value:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yqk98aaz24BB","executionInfo":{"status":"ok","timestamp":1750540978327,"user_tz":240,"elapsed":15657,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"ebdc4ce6-8f12-48ff-eb41-d7e08aedd57d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Metrics for 70/30 split:\n","Precision@k: 0.0545\n","Recall@k: 0.1591\n","F1@k: 0.0812\n","RMSE: 1.0172\n","MSE: 1.0347\n","MAE: 0.7124\n","\n","Metrics for 80/20 split:\n","Precision@k: 0.0588\n","Recall@k: 0.1961\n","F1@k: 0.0905\n","RMSE: 1.0663\n","MSE: 1.1370\n","MAE: 0.7442\n"]}]},{"cell_type":"markdown","source":["### tuning w/ grid serach + cross-validation\n","use values suggested in article:\n","previous als used:\n","maxIter=10,regParam=0.1,rank=10,"],"metadata":{"id":"Sh2Hs5Mz3Bjq"}},{"cell_type":"code","source":["for label in models:\n","    print(label)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yv0YGhKRnlnf","executionInfo":{"status":"ok","timestamp":1750532474564,"user_tz":240,"elapsed":11,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"202389c7-561a-4ee3-80ac-38f0c764af48"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["70/30\n","80/20\n"]}]},{"cell_type":"code","source":["# tuning the 70/30 model\n","train_df = train_sets[\"70/30\"]\n","test_df = test_sets[\"70/30\"]"],"metadata":{"id":"7DLxJeKHngpe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from pyspark.ml.tuning import ParamGridBuilder, CrossValidator"],"metadata":{"id":"lPxB015x3A6T"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Step 1: Define ALS estimator (no fit yet)\n","als = ALS(\n","    userCol=\"userId\",\n","    itemCol=\"movieId\",\n","    ratingCol=\"rating\",\n","    coldStartStrategy=\"drop\",\n","    maxIter=10,\n","    nonnegative=True,\n","    seed=42\n",")\n","\n","# als = ALS(\n","#         userCol=\"userId\",\n","#         itemCol=\"movieId\",\n","#         ratingCol=\"rating\",\n","#         coldStartStrategy=\"drop\",\n","#         maxIter=10,\n","#         regParam=0.1,\n","#         rank=10,\n","#         nonnegative=True\n","#     )\n","\n","# Step 2: Define hyperparameter grid\n","param_grid = ParamGridBuilder() \\\n","    .addGrid(als.rank, [1, 10, 20, 30]) \\\n","    .addGrid(als.regParam, [0.05, 0.1, 0.15]) \\\n","    .build()\n","\n","# Step 3: Define RMSE evaluator\n","evaluator = RegressionEvaluator(\n","    metricName='rmse',\n","    labelCol='rating',\n","    predictionCol='prediction'\n",")\n","\n","# Step 4: Define CrossValidator\n","cv = CrossValidator(\n","    estimator=als,\n","    estimatorParamMaps=param_grid,\n","    evaluator=evaluator,\n","    numFolds=3,\n","    collectSubModels=True\n",")\n","\n","# Step 5: Fit on training data\n","cv_model = cv.fit(train_df)"],"metadata":{"id":"369mVj5r4yEh"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### visualize hyperparams' values' impact on RMSE"],"metadata":{"id":"AKCmFErNeUpE"}},{"cell_type":"code","source":["# extract results from cv_model\n","param_maps = cv_model.getEstimatorParamMaps()\n","avg_metrics = cv_model.avgMetrics\n","\n","# build a results table\n","results = []\n","for params, rmse in zip(param_maps, avg_metrics):\n","    results.append({\n","        \"rank\": params[als.rank],\n","        \"regParam\": params[als.regParam],\n","        \"RMSE\": rmse\n","    })\n","\n","df = pd.DataFrame(results)"],"metadata":{"id":"-5-7ZyPheaQo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["heatmap_data = df.pivot(index=\"rank\", columns=\"regParam\", values=\"RMSE\")\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(heatmap_data, annot=True, fmt=\".4f\", cmap=\"viridis\")\n","plt.title(\"RMSE by Rank and RegParam\")\n","plt.ylabel(\"Rank\")\n","plt.xlabel(\"RegParam\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"dBWNCiCYehjW","executionInfo":{"status":"ok","timestamp":1750541456531,"user_tz":240,"elapsed":661,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"41dd4dc2-8894-4831-8e3e-3ee09b762ce7"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#### get the best model's hyperparams"],"metadata":{"id":"uX-dAUs-ewZg"}},{"cell_type":"code","source":["# Evaluate best model on test set\n","best_model = cv_model.bestModel\n","rmse = evaluator.evaluate(best_model.transform(test_df).dropna())\n","print(f\"\\nBest model RMSE on test set: {rmse:.4f}\")\n","\n","# Extract parameters used in the best model\n","best_params = {\n","    \"rank\": best_model._java_obj.parent().getRank(),\n","    \"regParam\": best_model._java_obj.parent().getRegParam(),\n","}\n","\n","print(\"Best model parameters:\")\n","for param, value in best_params.items():\n","    print(f\"  {param}: {value}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z4k0i-065rZN","executionInfo":{"status":"ok","timestamp":1750541457937,"user_tz":240,"elapsed":1403,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"1dfeb517-2069-488a-cc96-019b5eb791cd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Best model RMSE on test set: 1.0472\n","Best model parameters:\n","  rank: 20\n","  regParam: 0.1\n"]}]},{"cell_type":"markdown","source":["#### eval best model"],"metadata":{"id":"0ZvtG9OWlgTA"}},{"cell_type":"code","source":["metrics = evaluate_all_metrics(best_model, test_df,\n","                               k=5,            # top-5 list\n","                               rating_thresh=4.0)\n","\n","for k, v in metrics.items():\n","    print(f\"{k:12s}: {v:,.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mqkaAeDTlh0Z","executionInfo":{"status":"ok","timestamp":1750541464329,"user_tz":240,"elapsed":6391,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"c238465a-482e-481c-ae5c-df0e2335bb72"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Precision@k : 0.0455\n","Recall@k    : 0.1061\n","F1@k        : 0.0636\n","RMSE        : 1.0472\n","MSE         : 1.0965\n","MAE         : 0.7037\n"]}]},{"cell_type":"markdown","source":["hyperparams impact on performance & training time; how to balance\n","\n","Rank\n","- Controls the dimensionality of the latent user/item vectors\n","- Higher rank can capture more nuanced patterns, but training time grows roughly linearly with rank\n","\n","regParam\n","- Controls how much the model penalizes complex user/item vectors, Prevents overfitting, especially on sparse data\n","- lower values, model tends to overfit; higher value, tends to underfit (i.e. predict average ratings for all)\n","\n","Tradeoff:\n","In my experiments, note diminishing returns (rank=30 and rank=45 dont improve RMSE much beyond rank=15),  rank 15 is optimal."],"metadata":{"id":"lFWSOhU1j43S"}},{"cell_type":"markdown","source":["### personalized recommendation"],"metadata":{"id":"g0Kt4lKE6g-z"}},{"cell_type":"code","source":["from pyspark.sql import Row\n","target_users = spark.createDataFrame([Row(userId=11), Row(userId=21)])"],"metadata":{"id":"KF5Nhpyn6kE_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["top_n = 5\n","user_recs = best_model.recommendForUserSubset(target_users, top_n)"],"metadata":{"id":"NqwUPspq6uuy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### top5 movies recommended for user 21,11"],"metadata":{"id":"eX8XtRdKsO_5"}},{"cell_type":"markdown","source":[],"metadata":{"id":"hrOpndKysO9l"}},{"cell_type":"code","source":["print(\"cv's best model recommends\")\n","user_recs.show(truncate=False)\n","# [{movieId1, rating1}, {movieId2, rating2}, ...]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2w5It7qe8vCe","executionInfo":{"status":"ok","timestamp":1750541466673,"user_tz":240,"elapsed":2177,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"a1e933f3-c4ec-4f3f-990a-af5edb077f8a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["cv's best model recommends\n","+------+----------------------------------------------------------------------------------+\n","|userId|recommendations                                                                   |\n","+------+----------------------------------------------------------------------------------+\n","|21    |[{53, 4.056582}, {52, 3.659092}, {29, 3.6516068}, {2, 3.4786358}, {74, 3.2658987}]|\n","|11    |[{32, 4.772703}, {18, 4.6721554}, {30, 4.5145817}, {27, 4.452958}, {23, 4.270186}]|\n","+------+----------------------------------------------------------------------------------+\n","\n"]}]},{"cell_type":"markdown","source":["ALS (Alternating Least Squares) generates recommendations by factorizing the user-item rating matrix R into two lower-dimensional matrices: users matrix U and item matrix P. Each user and movie is represented as a vector of latent features (e.g., preferences and attributes).\n","\n","Input: R, a sparse matrix of size m*n, where rows are users, columns are items, cell_ij is user i's rating for item j\n","\n","Parmas to learn: latent representations for all users and items, specifically,\n","- U, matrix of size m*k, where row u_i: user i's preferences across k latent features.\n","- P, matrix of size n*k, where row p_j: item's characteristics across k latent features.\n","\n","Loss to minimize: sum of all [(u_i dot prodct p_j) - true rating], for R_ij exists, since dot product measures alignment (high dot product means that user and item vector are very similar, thus high rating)\n","\n","To infer:\n","for any (user, item) pair, the rating would be the dot product of their latent representations."],"metadata":{"id":"fP7oIObx7W1J"}},{"cell_type":"markdown","source":["#### How ALS uses user ratings to generate recommendations\n"],"metadata":{"id":"RJ2xDK7xqGYJ"}},{"cell_type":"markdown","source":["ALS uses user ratings i.e. R, to learn U and P s.t.\n","- Each u_i best explains the ratings user i gave\n","- Each p_j best explains the ratings item j received\n","\n","e.g. if R_ij=5 i.e. user i rates item j with 5, ALS tries to make dotprod(u_i, p_j=5)\n","\n","Once ALS learns U and P, to recommend new item for a given user i:\n","- ALS compute predicted scores for all items\n","- Exclude items user already rated\n","- Sort the remaining by predicted score, and recommend top-k items, where k is specified by user"],"metadata":{"id":"kReK-7hyq9NR"}},{"cell_type":"markdown","source":["#### ALS for dataset with limited features"],"metadata":{"id":"a_EYWuu_q1Sw"}},{"cell_type":"markdown","source":["- ALS works well with limited features — it learns patterns directly from user-item ratings.\n","- No metadata needed (e.g., no genres or user info required).\n","- May struggle with very sparse or small datasets i.e. very few available ratings for it to train on."],"metadata":{"id":"gt1R19v_7lik"}},{"cell_type":"markdown","source":["#### baseline (70/30 split one) v.s. refined recommendation"],"metadata":{"id":"m14qzbvr7x-Z"}},{"cell_type":"code","source":["# Get base model\n","first_model = models[\"70/30\"]"],"metadata":{"id":"fILMtcBp7xrY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["target_users = spark.createDataFrame([Row(userId=11), Row(userId=21)])"],"metadata":{"id":"285t6C078XRm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["top_n = 5\n","user_recs = first_model.recommendForUserSubset(target_users, top_n)\n","print(\"baseline model recommends\")\n","user_recs.show(truncate=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"svLovh-d8ZY0","executionInfo":{"status":"ok","timestamp":1750541468612,"user_tz":240,"elapsed":1805,"user":{"displayName":"J gong","userId":"04562648413410452541"}},"outputId":"110391f5-c440-4bc5-c667-d5a4171d05ba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["baseline model recommends\n","+------+------------------------------------------------------------------------------------+\n","|userId|recommendations                                                                     |\n","+------+------------------------------------------------------------------------------------+\n","|21    |[{53, 3.7534876}, {29, 3.5829422}, {52, 3.5488617}, {76, 3.5134597}, {2, 3.4579816}]|\n","|11    |[{32, 4.7528567}, {30, 4.6563816}, {27, 4.5116687}, {46, 4.368993}, {18, 4.3575163}]|\n","+------+------------------------------------------------------------------------------------+\n","\n"]}]},{"cell_type":"markdown","source":["#### featuers added for better personalized recommendation\n","- User features: demographics (age, gender, jobs, etc.), location\n","- Movie features: tags or keywords"],"metadata":{"id":"HPuOHQKttN0P"}}]}